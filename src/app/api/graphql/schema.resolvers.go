package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"time"

	"github.com/alex-stephen/recipes/src/app/api/graphql/generated"
	"github.com/alex-stephen/recipes/src/app/api/graphql/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, input model.RecipeInput) (*model.Recipe, error) {
	newRecipe := &model.Recipe{
		ID:           primitive.NewObjectID().Hex(),
		Title:        input.Title,
		Ingredients:  input.Ingredients,
		Instructions: input.Instructions,
		CreatedAt:    time.Now().UTC().Format(time.RFC3339),
	}

	// Convert to a BSON map for MongoDB
	doc := bson.M{
		"id":           newRecipe.ID,
		"title":        newRecipe.Title,
		"ingredients":  newRecipe.Ingredients,
		"instructions": newRecipe.Instructions,
		"createdAt":    newRecipe.CreatedAt,
	}

	_, err := r.DB.InsertOne(ctx, doc)
	if err != nil {
		return nil, err
	}

	return newRecipe, nil
}

// UpdateRecipe is the resolver for the updateRecipe field.
func (r *mutationResolver) UpdateRecipe(ctx context.Context, input model.UpdateRecipeInput) (*model.Recipe, error) {
	objID, err := primitive.ObjectIDFromHex(input.ID)
	if err != nil {
		return nil, err
	}

	update := bson.M{}
	if input.Title != nil {
		update["title"] = *input.Title
	}
	if input.Ingredients != nil {
		update["ingredients"] = input.Ingredients
	}
	if input.Instructions != nil {
		update["instructions"] = input.Instructions
	}

	_, err = r.DB.UpdateByID(ctx, objID, bson.M{"$set": update})
	if err != nil {
		return nil, err
	}

	// Fetch the updated recipe
	var updated model.Recipe
	err = r.DB.FindOne(ctx, bson.M{"_id": objID}).Decode(&updated)
	if err != nil {
		return nil, err
	}

	return &updated, nil
}

// DeleteRecipe is the resolver for the deleteRecipe field.
func (r *mutationResolver) DeleteRecipe(ctx context.Context, id string) (bool, error) {
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return false, err
	}

	res, err := r.DB.DeleteOne(ctx, bson.M{"_id": objID})
	if err != nil {
		return false, err
	}

	return res.DeletedCount > 0, nil
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context, limit *int, offset *int, search *string) ([]*model.Recipe, error) {
	findOptions := options.Find()
	if limit != nil {
		findOptions.SetLimit(int64(*limit))
	}
	if offset != nil {
		findOptions.SetSkip(int64(*offset))
	}

	filter := bson.M{}
	if search != nil && *search != "" {
		filter["title"] = bson.M{"$regex": *search, "$options": "i"}
	}

	cursor, err := r.DB.Find(ctx, filter, findOptions)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var results []*model.Recipe
	for cursor.Next(ctx) {
		var recipe model.Recipe
		if err := cursor.Decode(&recipe); err != nil {
			return nil, err
		}
		results = append(results, &recipe)
	}

	return results, nil
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id string) (*model.Recipe, error) {
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var recipe model.Recipe
	err = r.DB.FindOne(ctx, bson.M{"_id": objID}).Decode(&recipe)
	if err == mongo.ErrNoDocuments {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}

	return &recipe, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
